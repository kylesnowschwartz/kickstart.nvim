-- Ruby LSP configuration for Neovim 0.11+
-- This configuration leverages the native LSP API without relying on on_new_config

local function collect_bundle_gem_paths(root_dir)
  local gem_paths = {}
  if vim.fn.filereadable(root_dir .. '/Gemfile') == 1 then
    local gem_paths_cmd = 'cd ' .. root_dir .. ' && bundle show --paths 2>/dev/null'
    local gem_paths_output = vim.fn.system(gem_paths_cmd)

    if gem_paths_output and gem_paths_output ~= '' then
      for path in string.gmatch(gem_paths_output, '[^\r\n]+') do
        if vim.fn.isdirectory(path) == 1 then
          table.insert(gem_paths, path)
        end
      end
    end
  end
  return gem_paths
end

-- Initialize for current working directory
local cwd = vim.fn.getcwd()
local initial_gem_paths = collect_bundle_gem_paths(cwd)

-- Check if ruby-lsp is available through bundler in the given directory
-- If so, return bundle exec command, otherwise return nil
local function get_bundled_ruby_lsp_cmd(dir)
  if vim.fn.filereadable(dir .. '/Gemfile') == 1 then
    local bundle_check_cmd = 'cd ' .. dir .. ' && bundle show ruby-lsp 2>/dev/null'
    local output = vim.fn.system(bundle_check_cmd)

    if output and output ~= '' then
      return { 'bundle', 'exec', 'ruby-lsp' }
    end
  end
  return nil
end

-- Default configuration
local config = {
  -- Command to start the LSP server - will attempt to use bundler first if ruby-lsp is available through the project
  -- This might be overridden based on project specifics using an autocmd that runs before the LSP client starts
  cmd = { 'ruby-lsp' },
  filetypes = { 'ruby' },
  root_markers = { 'Gemfile', '.git' },

  settings = {
    rubocop = {
      configPath = '.rubocop.yml',
      useBundler = false, -- Default, may be overridden by autocmd
    },
    formatter = {
      name = 'rubocop',
      useBundler = false, -- Default, may be overridden by autocmd
    },
    experimentalFeaturesEnabled = true,
    -- Core features loaded immediately, non-essential features can be lazy-loaded
    enabledFeatures = {
      'diagnostics',
      'completion',
      'hover',
      'documentHighlights',
      'documentSymbols',
      'semanticHighlighting',
      'formatting',
      'codeActions',
      'inlayHint',
      'onTypeFormatting',
      'foldingRanges',
      'selectionRanges',
      'codeLens',
    },
    -- Include initial gem paths from the current working directory
    bundleGemPaths = initial_gem_paths,
  },
}

-- Create an autocmd to configure the ruby-lsp client before it starts
-- This replaces the functionality of on_new_config in Neovim 0.11+
vim.api.nvim_create_autocmd('FileType', {
  pattern = 'ruby',
  callback = function()
    local root_dir = vim.fn.getcwd() -- Default to current directory

    -- Try to determine the project root directory
    for _, marker in ipairs(config.root_markers) do
      local root = vim.fs.find(marker, {
        upward = true,
        path = vim.fn.expand '%:p:h',
        type = 'file',
      })[1]

      if root then
        root_dir = vim.fn.fnamemodify(root, ':h')
        break
      end
    end

    -- Check for bundled ruby-lsp
    local bundled_cmd = get_bundled_ruby_lsp_cmd(root_dir)
    if bundled_cmd then
      -- Update client config for this buffer to use bundler
      local updated_config = {
        cmd = bundled_cmd,
        settings = {
          rubocop = { useBundler = true },
          formatter = { useBundler = true },
          bundleGemPaths = collect_bundle_gem_paths(root_dir),
        },
      }

      -- Register the per-project configuration for when the LSP starts
      vim.api.nvim_create_autocmd('LspAttach', {
        callback = function(args)
          local client = vim.lsp.get_client_by_id(args.data.client_id)
          if client and client.name == 'ruby_ls' then
            -- Apply the bundler settings to the client
            client.config.cmd = updated_config.cmd
            client.config.settings = vim.tbl_deep_extend('force', client.config.settings or {}, updated_config.settings)
          end
        end,
        once = true,
      })
    end
  end,
})

return config

